name: Deploy to FTP

on:
  push:
    branches: [main]
    paths-ignore:
      - '.github/**'
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
  workflow_dispatch:

concurrency:
  group: deploy-ftp
  cancel-in-progress: true

jobs:
  check-dependabot:
    name: Check if Dependabot
    runs-on: ubuntu-latest
    outputs:
      is-dependabot: ${{ steps.check.outputs.is-dependabot }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 10

      - name: Check if triggered by Dependabot
        id: check
        run: |
          # Bei manuellem Start (workflow_dispatch) immer erlauben
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "is-dependabot=false" >> $GITHUB_OUTPUT
            echo "Manual workflow dispatch - allowing deployment"
            exit 0
          fi

          ACTOR="${{ github.actor }}"
          COMMIT_AUTHOR="${{ github.event.head_commit.author.name }}"
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          REF="${{ github.ref }}"

          # Prüfe ob es ein Release-Branch ist (releases/v*)
          if [[ "$REF" =~ ^refs/heads/releases/v ]] || [[ "$REF" =~ ^refs/remotes/origin/releases/v ]]; then
            echo "is-dependabot=false" >> $GITHUB_OUTPUT
            echo "Release branch detected - allowing deployment"
            exit 0
          fi

          # Prüfe nur den aktuellen Commit, nicht die Historie
          # Prüfe auf Dependabot-Actor oder Commit-Autor
          # Nur prüfen wenn es wirklich Dependabot ist, nicht nur wegen Commit-Message
          if [ "$ACTOR" = "dependabot[bot]" ]; then
            echo "is-dependabot=true" >> $GITHUB_OUTPUT
            echo "Skipping deployment - triggered by Dependabot"
            echo "Actor: $ACTOR"
            exit 0
          fi

          # Prüfe Commit-Autor nur wenn es wirklich Dependabot ist
          if echo "$COMMIT_AUTHOR" | grep -qi "^dependabot\[bot\]$"; then
            echo "is-dependabot=true" >> $GITHUB_OUTPUT
            echo "Skipping deployment - commit author is Dependabot"
            echo "Commit Author: $COMMIT_AUTHOR"
            exit 0
          fi

          # Prüfe nur ob der aktuelle Commit direkt von Dependabot stammt
          # Prüfe nur auf explizite Dependabot-Referenzen im aktuellen Commit
          if echo "$COMMIT_MSG" | grep -qiE "^Merge.*dependabot/|^Bump.*from.*dependabot/|dependabot\[bot\]"; then
            echo "is-dependabot=true" >> $GITHUB_OUTPUT
            echo "Skipping deployment - commit message indicates Dependabot"
            echo "Commit Message: $COMMIT_MSG"
            exit 0
          fi

          # Kein Dependabot erkannt
          echo "is-dependabot=false" >> $GITHUB_OUTPUT
          echo "Not triggered by Dependabot, proceeding with deployment"
          echo "Actor: $ACTOR"
          echo "Commit Author: $COMMIT_AUTHOR"
          echo "Ref: $REF"

  deploy:
    name: Build and Deploy
    needs: check-dependabot
    if: needs.check-dependabot.outputs.is-dependabot == 'false'
    runs-on: ubuntu-latest
    environment: FTP

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Generate deployment version
        id: version
        run: |
          VERSION=$(npm pkg get version | tr -d '"')
          BUILD_NUMBER=${{ github.run_number }}
          DEPLOY_VERSION="${VERSION}-build-${BUILD_NUMBER}"
          echo "version=${DEPLOY_VERSION}" >> $GITHUB_OUTPUT
          echo "Deploying version: ${DEPLOY_VERSION}"

      - name: Deploy to FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./dist/
          server-dir: /
          dangerous-clean-slate: true
          exclude: |
            **/.well-known/**
            **/.htaccess

      - name: Deployment success
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TG_CHANNEL }}
          token: ${{ secrets.TG_BOT }}
          format: markdown
          message: |
            ✅ *Deployment ${{ steps.version.outputs.version }} erfolgreich - time.maharder.de*

            Das Deployment ${{ steps.version.outputs.version }} auf time.maharder.de war **erfolgreich**!

            📅 **Datum**: ${{ github.event.head_commit.timestamp }}
            🔄 **Commit**: `${{ github.sha }}`
            📝 **Nachricht**: ${{ github.event.head_commit.message }}
            👤 **Autor**: [${{ github.event.head_commit.author.name }}](https://github.com/${{ github.event.head_commit.author.username }})

            Alle Dateien wurden erfolgreich auf den FTP-Server hochgeladen.

            🚀 [GitHub Actions](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        continue-on-error: true

      - name: Deployment failed
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TG_CHANNEL }}
          token: ${{ secrets.TG_BOT }}
          format: markdown
          message: |
            ❌ *Deployment fehlgeschlagen - time.maharder.de*

            Das Deployment auf time.maharder.de #${{ github.run_number }} ist **fehlgeschlagen**!

            📅 **Datum**: ${{ github.event.head_commit.timestamp }}
            🔄 **Commit**: `${{ github.sha }}`
            📝 **Nachricht**: ${{ github.event.head_commit.message }}
            👤 **Autor**: [${{ github.event.head_commit.author.name }}](https://github.com/${{ github.event.head_commit.author.username }})

            Bitte überprüfe die GitHub Actions Logs für weitere Details.

            🔍 [GitHub Actions](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        continue-on-error: true
